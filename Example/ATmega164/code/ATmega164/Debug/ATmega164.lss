
ATmega164.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000026c  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .comment      00000030  00000000  00000000  000002c0  2**0
                  CONTENTS, READONLY
  2 .debug_aranges 00000058  00000000  00000000  000002f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   00000252  00000000  00000000  00000348  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 0000016f  00000000  00000000  0000059a  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   00000215  00000000  00000000  00000709  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000080  00000000  00000000  00000920  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000001b9  00000000  00000000  000009a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000294  00000000  00000000  00000b59  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000038  00000000  00000000  00000ded  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
   8:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
   c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  10:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  14:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  18:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  1c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  20:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  24:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  28:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  2c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  30:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  34:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  38:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  3c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  40:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  44:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  48:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  4c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  50:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  54:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  58:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  5c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  60:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  64:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  68:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  6c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  70:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  74:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  78:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  7c:	ec 00       	.word	0x00ec	; ????
  7e:	f2 00       	.word	0x00f2	; ????
  80:	f8 00       	.word	0x00f8	; ????
  82:	fe 00       	.word	0x00fe	; ????
  84:	04 01       	movw	r0, r8
  86:	0a 01       	movw	r0, r20
  88:	10 01       	movw	r2, r0
  8a:	16 01       	movw	r2, r12

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d4 e0       	ldi	r29, 0x04	; 4
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	0e 94 52 00 	call	0xa4	; 0xa4 <main>
  9c:	0c 94 34 01 	jmp	0x268	; 0x268 <_exit>

000000a0 <__bad_interrupt>:
  a0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a4 <main>:


int main(void)
{
	uint16_t DATA;
	DDRD |=(1<<PD0);//pin PD0 set as OUTPUT 
  a4:	50 9a       	sbi	0x0a, 0	; 10

	ADC_INIT(128,AVCC);
  a6:	61 e0       	ldi	r22, 0x01	; 1
  a8:	80 e8       	ldi	r24, 0x80	; 128
  aa:	0e 94 cb 00 	call	0x196	; 0x196 <ADC_INIT>
	

	while(1)

	{	DATA = ADC_READ(0);//pin ADC0 set as INPUT
  ae:	80 e0       	ldi	r24, 0x00	; 0
  b0:	0e 94 de 00 	call	0x1bc	; 0x1bc <ADC_READ>


		if (DATA>=512)
  b4:	81 15       	cp	r24, r1
  b6:	92 40       	sbci	r25, 0x02	; 2
  b8:	10 f0       	brcs	.+4      	; 0xbe <main+0x1a>
		{
			PORTD |=(1<<PD0);
  ba:	58 9a       	sbi	0x0b, 0	; 11
  bc:	f8 cf       	rjmp	.-16     	; 0xae <main+0xa>
		}
		else
		{
			PORTD &= ~(1<<PD0);
  be:	58 98       	cbi	0x0b, 0	; 11
  c0:	f6 cf       	rjmp	.-20     	; 0xae <main+0xa>

000000c2 <ADC_PRESCALER_SET>:
		|| defined(__AVR_ATmega8__)\
		|| defined(__AVR_ATmega48__) || defined(__AVR_ATmega48A__) || defined(__AVR_ATmega48P__) || defined(__AVR_ATmega48PA__) || defined(__AVR_ATmega48PB__)\
		|| defined(__AVR_ATmega88__) || defined(__AVR_ATmega88A__) || defined(__AVR_ATmega88P__) || defined(__AVR_ATmega88PA__) || defined(__AVR_ATmega88PB__)\
		|| defined(__AVR_ATmega168__) || defined(__AVR_ATmega168P__) || defined(__AVR_ATmega168A__) || defined(__AVR_ATmega168PA__) || defined(__AVR_ATmega168PB__)\
		|| defined(__AVR_ATmega328__) || defined(__AVR_ATmega328P__)
			ADCSRA &= (~(1<<ADPS2)) & (~(1<<ADPS1)) & (~(1<<ADPS0)) ; // clear ADPS2:ADPS0 for initialization
  c2:	ea e7       	ldi	r30, 0x7A	; 122
  c4:	f0 e0       	ldi	r31, 0x00	; 0
  c6:	90 81       	ld	r25, Z
  c8:	98 7f       	andi	r25, 0xF8	; 248
  ca:	90 83       	st	Z, r25
	
		switch(prescaler)
  cc:	80 31       	cpi	r24, 0x10	; 16
  ce:	09 f1       	breq	.+66     	; 0x112 <ADC_PRESCALER_SET+0x50>
  d0:	38 f4       	brcc	.+14     	; 0xe0 <ADC_PRESCALER_SET+0x1e>
  d2:	84 30       	cpi	r24, 0x04	; 4
  d4:	91 f0       	breq	.+36     	; 0xfa <ADC_PRESCALER_SET+0x38>
  d6:	88 30       	cpi	r24, 0x08	; 8
  d8:	b1 f0       	breq	.+44     	; 0x106 <ADC_PRESCALER_SET+0x44>
  da:	82 30       	cpi	r24, 0x02	; 2
  dc:	91 f5       	brne	.+100    	; 0x142 <ADC_PRESCALER_SET+0x80>
  de:	07 c0       	rjmp	.+14     	; 0xee <ADC_PRESCALER_SET+0x2c>
  e0:	80 34       	cpi	r24, 0x40	; 64
  e2:	19 f1       	breq	.+70     	; 0x12a <ADC_PRESCALER_SET+0x68>
  e4:	80 38       	cpi	r24, 0x80	; 128
  e6:	39 f1       	breq	.+78     	; 0x136 <ADC_PRESCALER_SET+0x74>
  e8:	80 32       	cpi	r24, 0x20	; 32
  ea:	59 f5       	brne	.+86     	; 0x142 <ADC_PRESCALER_SET+0x80>
  ec:	18 c0       	rjmp	.+48     	; 0x11e <ADC_PRESCALER_SET+0x5c>
		{
			case 2:ADCSRA |= (1<<ADPS0);//-----------------------------------  0 0 1
  ee:	ea e7       	ldi	r30, 0x7A	; 122
  f0:	f0 e0       	ldi	r31, 0x00	; 0
  f2:	80 81       	ld	r24, Z
  f4:	81 60       	ori	r24, 0x01	; 1
  f6:	80 83       	st	Z, r24
			break;
  f8:	08 95       	ret
			case 4:ADCSRA |= (1<<ADPS1);//-----------------------------------  0 1 0
  fa:	ea e7       	ldi	r30, 0x7A	; 122
  fc:	f0 e0       	ldi	r31, 0x00	; 0
  fe:	80 81       	ld	r24, Z
 100:	82 60       	ori	r24, 0x02	; 2
 102:	80 83       	st	Z, r24
			break;
 104:	08 95       	ret
			case 8:ADCSRA |= (1<<ADPS1) | (1<<ADPS0);//----------------------  0 1 1
 106:	ea e7       	ldi	r30, 0x7A	; 122
 108:	f0 e0       	ldi	r31, 0x00	; 0
 10a:	80 81       	ld	r24, Z
 10c:	83 60       	ori	r24, 0x03	; 3
 10e:	80 83       	st	Z, r24
			break;
 110:	08 95       	ret
			case 16:ADCSRA |= (1<<ADPS2);//----------------------------------  1 0 0
 112:	ea e7       	ldi	r30, 0x7A	; 122
 114:	f0 e0       	ldi	r31, 0x00	; 0
 116:	80 81       	ld	r24, Z
 118:	84 60       	ori	r24, 0x04	; 4
 11a:	80 83       	st	Z, r24
			break;
 11c:	08 95       	ret
			case 32:ADCSRA |= (1<<ADPS2) | (1<<ADPS0);//---------------------  1 0 1
 11e:	ea e7       	ldi	r30, 0x7A	; 122
 120:	f0 e0       	ldi	r31, 0x00	; 0
 122:	80 81       	ld	r24, Z
 124:	85 60       	ori	r24, 0x05	; 5
 126:	80 83       	st	Z, r24
			break;
 128:	08 95       	ret
			case 64:ADCSRA |= (1<<ADPS2) | (1<<ADPS1);//---------------------  1 1 0
 12a:	ea e7       	ldi	r30, 0x7A	; 122
 12c:	f0 e0       	ldi	r31, 0x00	; 0
 12e:	80 81       	ld	r24, Z
 130:	86 60       	ori	r24, 0x06	; 6
 132:	80 83       	st	Z, r24
			break;
 134:	08 95       	ret
			case 128:ADCSRA |= (1<<ADPS2) | (1<<ADPS1) | (1<<ADPS0);//-------  1 1 1
 136:	ea e7       	ldi	r30, 0x7A	; 122
 138:	f0 e0       	ldi	r31, 0x00	; 0
 13a:	80 81       	ld	r24, Z
 13c:	87 60       	ori	r24, 0x07	; 7
 13e:	80 83       	st	Z, r24
			break;
 140:	08 95       	ret
			default:ADCSRA &= (~(1<<ADPS2)) & (~(1<<ADPS1)) & (~(1<<ADPS0));// 0 0 0
 142:	ea e7       	ldi	r30, 0x7A	; 122
 144:	f0 e0       	ldi	r31, 0x00	; 0
 146:	80 81       	ld	r24, Z
 148:	88 7f       	andi	r24, 0xF8	; 248
 14a:	80 83       	st	Z, r24
 14c:	08 95       	ret

0000014e <ADC_voltage_Reference>:
		|| defined(__AVR_ATmega8__)\
		|| defined(__AVR_ATmega48__) || defined(__AVR_ATmega48A__) || defined(__AVR_ATmega48P__) || defined(__AVR_ATmega48PA__) || defined(__AVR_ATmega48PB__)\
		|| defined(__AVR_ATmega88__) || defined(__AVR_ATmega88A__) || defined(__AVR_ATmega88P__) || defined(__AVR_ATmega88PA__) || defined(__AVR_ATmega88PB__)\
		|| defined(__AVR_ATmega168__) || defined(__AVR_ATmega168P__) || defined(__AVR_ATmega168A__) || defined(__AVR_ATmega168PA__) || defined(__AVR_ATmega168PB__)\
		||defined(__AVR_ATmega328__) || defined(__AVR_ATmega328P__)
		ADMUX &= (~(1<<REFS0)) & (~(1<<REFS1)); // clear REFS1:REFS0 for initialization
 14e:	ec e7       	ldi	r30, 0x7C	; 124
 150:	f0 e0       	ldi	r31, 0x00	; 0
 152:	90 81       	ld	r25, Z
 154:	9f 73       	andi	r25, 0x3F	; 63
 156:	90 83       	st	Z, r25
		ADMUX |= (1<<REFS0); // Default AVCC has been set
 158:	90 81       	ld	r25, Z
 15a:	90 64       	ori	r25, 0x40	; 64
 15c:	90 83       	st	Z, r25
	
		if(Reference_Voltage==AREF){ADMUX &= (~(1<<REFS0)) & (~(1<<REFS1));}
 15e:	81 11       	cpse	r24, r1
 160:	04 c0       	rjmp	.+8      	; 0x16a <ADC_voltage_Reference+0x1c>
 162:	80 81       	ld	r24, Z
 164:	8f 73       	andi	r24, 0x3F	; 63
 166:	80 83       	st	Z, r24
 168:	08 95       	ret
		else if (Reference_Voltage==AVCC){ADMUX |= (1<<REFS0);}
 16a:	81 30       	cpi	r24, 0x01	; 1
 16c:	31 f4       	brne	.+12     	; 0x17a <ADC_voltage_Reference+0x2c>
 16e:	ec e7       	ldi	r30, 0x7C	; 124
 170:	f0 e0       	ldi	r31, 0x00	; 0
 172:	80 81       	ld	r24, Z
 174:	80 64       	ori	r24, 0x40	; 64
 176:	80 83       	st	Z, r24
 178:	08 95       	ret
		else if (Reference_Voltage==INTERNAL){ADMUX |= (1<<REFS1) | (1<<REFS0);}
 17a:	83 30       	cpi	r24, 0x03	; 3
 17c:	31 f4       	brne	.+12     	; 0x18a <ADC_voltage_Reference+0x3c>
 17e:	ec e7       	ldi	r30, 0x7C	; 124
 180:	f0 e0       	ldi	r31, 0x00	; 0
 182:	80 81       	ld	r24, Z
 184:	80 6c       	ori	r24, 0xC0	; 192
 186:	80 83       	st	Z, r24
 188:	08 95       	ret
		else{ADMUX |= (1<<REFS0);}
 18a:	ec e7       	ldi	r30, 0x7C	; 124
 18c:	f0 e0       	ldi	r31, 0x00	; 0
 18e:	80 81       	ld	r24, Z
 190:	80 64       	ori	r24, 0x40	; 64
 192:	80 83       	st	Z, r24
 194:	08 95       	ret

00000196 <ADC_INIT>:
//	------------possible parameter---------
//	prescaler = 2,4,8,16,32,64,128
//  Voltage_Reference = AREF,AVCC,INTERNAL

void ADC_INIT(uint8_t prescaler, uint8_t Voltage_Reference)
{
 196:	cf 93       	push	r28
 198:	c6 2f       	mov	r28, r22
		|| defined(__AVR_ATmega48__) || defined(__AVR_ATmega48A__) || defined(__AVR_ATmega48P__) || defined(__AVR_ATmega48PA__) || defined(__AVR_ATmega48PB__)\
		|| defined(__AVR_ATmega88__) || defined(__AVR_ATmega88A__) || defined(__AVR_ATmega88P__) || defined(__AVR_ATmega88PA__) || defined(__AVR_ATmega88PB__)\
		|| defined(__AVR_ATmega168__) || defined(__AVR_ATmega168P__) || defined(__AVR_ATmega168A__) || defined(__AVR_ATmega168PA__) || defined(__AVR_ATmega168PB__)\
		|| defined(__AVR_ATmega328__) || defined(__AVR_ATmega328P__)
	
		ADCSRA |= (1<<ADEN); // ADC Enable
 19a:	ea e7       	ldi	r30, 0x7A	; 122
 19c:	f0 e0       	ldi	r31, 0x00	; 0
 19e:	90 81       	ld	r25, Z
 1a0:	90 68       	ori	r25, 0x80	; 128
 1a2:	90 83       	st	Z, r25
		ADC_PRESCALER_SET(prescaler); // set sampling frequency by prescaler bit
 1a4:	0e 94 61 00 	call	0xc2	; 0xc2 <ADC_PRESCALER_SET>
		ADC_voltage_Reference(Voltage_Reference); //set voltage reference //by default AVCC has been selected
 1a8:	8c 2f       	mov	r24, r28
 1aa:	0e 94 a7 00 	call	0x14e	; 0x14e <ADC_voltage_Reference>
		ADMUX &= ~(1<<ADLAR); //left adjust off // Though by default left adjust off // this line use for more convenient for future developer
 1ae:	ec e7       	ldi	r30, 0x7C	; 124
 1b0:	f0 e0       	ldi	r31, 0x00	; 0
 1b2:	80 81       	ld	r24, Z
 1b4:	8f 7d       	andi	r24, 0xDF	; 223
 1b6:	80 83       	st	Z, r24
	#endif
}
 1b8:	cf 91       	pop	r28
 1ba:	08 95       	ret

000001bc <ADC_READ>:
		|| defined(__AVR_ATmega164__) || defined(__AVR_ATmega164A__) || defined(__AVR_ATmega164P__) || defined(__AVR_ATmega164PA__)\
		|| defined(__AVR_ATmega324__) || defined(__AVR_ATmega324A__) || defined(__AVR_ATmega324P__) || defined(__AVR_ATmega324PA__)\
		|| defined(__AVR_ATmega644__) || defined(__AVR_ATmega644A__) || defined(__AVR_ATmega644P__) || defined(__AVR_ATmega644PA__)\
		|| defined(__AVR_ATmega1284__) || defined(__AVR_ATmega1284P__)\
		|| defined(__AVR_ATmega8535__)
		ADMUX &= (~(1<<MUX4)) & (~(1<<MUX3)) & (~(1<<MUX2)) & (~(1<<MUX1)) & (~(1<<MUX0)); // set channel ADC0 default
 1bc:	ec e7       	ldi	r30, 0x7C	; 124
 1be:	f0 e0       	ldi	r31, 0x00	; 0
 1c0:	90 81       	ld	r25, Z
 1c2:	90 7e       	andi	r25, 0xE0	; 224
 1c4:	90 83       	st	Z, r25
		switch(channel)
 1c6:	90 e0       	ldi	r25, 0x00	; 0
 1c8:	88 30       	cpi	r24, 0x08	; 8
 1ca:	91 05       	cpc	r25, r1
 1cc:	a8 f5       	brcc	.+106    	; 0x238 <ADC_READ+0x7c>
 1ce:	fc 01       	movw	r30, r24
 1d0:	e2 5c       	subi	r30, 0xC2	; 194
 1d2:	ff 4f       	sbci	r31, 0xFF	; 255
 1d4:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__tablejump2__>
		{
			case 0:ADMUX &= (~(1<<MUX4)) & (~(1<<MUX3)) & (~(1<<MUX2)) & (~(1<<MUX1)) & (~(1<<MUX0)); //---------- 0 0 0 0 0
 1d8:	ec e7       	ldi	r30, 0x7C	; 124
 1da:	f0 e0       	ldi	r31, 0x00	; 0
 1dc:	80 81       	ld	r24, Z
 1de:	80 7e       	andi	r24, 0xE0	; 224
 1e0:	80 83       	st	Z, r24
			break;
 1e2:	2f c0       	rjmp	.+94     	; 0x242 <ADC_READ+0x86>
			case 1:ADMUX |= (1<<MUX0);//-------------------------------------------------------------------------- 0 0 0 0 1
 1e4:	ec e7       	ldi	r30, 0x7C	; 124
 1e6:	f0 e0       	ldi	r31, 0x00	; 0
 1e8:	80 81       	ld	r24, Z
 1ea:	81 60       	ori	r24, 0x01	; 1
 1ec:	80 83       	st	Z, r24
			break;
 1ee:	29 c0       	rjmp	.+82     	; 0x242 <ADC_READ+0x86>
			case 2:ADMUX |= (1<<MUX1);//-------------------------------------------------------------------------- 0 0 0 1 0
 1f0:	ec e7       	ldi	r30, 0x7C	; 124
 1f2:	f0 e0       	ldi	r31, 0x00	; 0
 1f4:	80 81       	ld	r24, Z
 1f6:	82 60       	ori	r24, 0x02	; 2
 1f8:	80 83       	st	Z, r24
			break;
 1fa:	23 c0       	rjmp	.+70     	; 0x242 <ADC_READ+0x86>
			case 3:ADMUX |= (1<<MUX1) | (1<<MUX0);//-------------------------------------------------------------- 0 0 0 1 1
 1fc:	ec e7       	ldi	r30, 0x7C	; 124
 1fe:	f0 e0       	ldi	r31, 0x00	; 0
 200:	80 81       	ld	r24, Z
 202:	83 60       	ori	r24, 0x03	; 3
 204:	80 83       	st	Z, r24
			break;
 206:	1d c0       	rjmp	.+58     	; 0x242 <ADC_READ+0x86>
			case 4:ADMUX |= (1<<MUX2);//-------------------------------------------------------------------------- 0 0 1 0 0
 208:	ec e7       	ldi	r30, 0x7C	; 124
 20a:	f0 e0       	ldi	r31, 0x00	; 0
 20c:	80 81       	ld	r24, Z
 20e:	84 60       	ori	r24, 0x04	; 4
 210:	80 83       	st	Z, r24
			break;
 212:	17 c0       	rjmp	.+46     	; 0x242 <ADC_READ+0x86>
			case 5:ADMUX |= (1<<MUX2) | (1<<MUX0);//-------------------------------------------------------------- 0 0 1 0 1
 214:	ec e7       	ldi	r30, 0x7C	; 124
 216:	f0 e0       	ldi	r31, 0x00	; 0
 218:	80 81       	ld	r24, Z
 21a:	85 60       	ori	r24, 0x05	; 5
 21c:	80 83       	st	Z, r24
			break;
 21e:	11 c0       	rjmp	.+34     	; 0x242 <ADC_READ+0x86>
			case 6:ADMUX |= (1<<MUX2) | (1<<MUX1);//-------------------------------------------------------------- 0 0 1 1 0
 220:	ec e7       	ldi	r30, 0x7C	; 124
 222:	f0 e0       	ldi	r31, 0x00	; 0
 224:	80 81       	ld	r24, Z
 226:	86 60       	ori	r24, 0x06	; 6
 228:	80 83       	st	Z, r24
			break;
 22a:	0b c0       	rjmp	.+22     	; 0x242 <ADC_READ+0x86>
			case 7:ADMUX |= (1<<MUX2) | (1<<MUX1) | (1<<MUX0);//-------------------------------------------------- 0 0 1 1 1
 22c:	ec e7       	ldi	r30, 0x7C	; 124
 22e:	f0 e0       	ldi	r31, 0x00	; 0
 230:	80 81       	ld	r24, Z
 232:	87 60       	ori	r24, 0x07	; 7
 234:	80 83       	st	Z, r24
			break;
 236:	05 c0       	rjmp	.+10     	; 0x242 <ADC_READ+0x86>
			default:ADMUX &= (~(1<<MUX4)) & (~(1<<MUX3)) & (~(1<<MUX2)) & (~(1<<MUX1)) & (~(1<<MUX0)); // set channel ADC0 default
 238:	ec e7       	ldi	r30, 0x7C	; 124
 23a:	f0 e0       	ldi	r31, 0x00	; 0
 23c:	80 81       	ld	r24, Z
 23e:	80 7e       	andi	r24, 0xE0	; 224
 240:	80 83       	st	Z, r24
		}
		ADCSRA |=(1<<ADSC); // ADC conversion start
 242:	ea e7       	ldi	r30, 0x7A	; 122
 244:	f0 e0       	ldi	r31, 0x00	; 0
 246:	80 81       	ld	r24, Z
 248:	80 64       	ori	r24, 0x40	; 64
 24a:	80 83       	st	Z, r24
	
		while((ADCSRA & (1<<ADIF)) == 0){}; // wait for end conversion ( after conversion ADIF bit will be set automatically )
 24c:	80 81       	ld	r24, Z
 24e:	84 ff       	sbrs	r24, 4
 250:	fd cf       	rjmp	.-6      	; 0x24c <ADC_READ+0x90>
		//uint8_t high,low;
		//high=ADCH;
		//low=ADCL;
		return ADCW;// when conversion finished all data will be stored in ADCW
 252:	80 91 78 00 	lds	r24, 0x0078
 256:	90 91 79 00 	lds	r25, 0x0079
	
	
	#else
		#error "No processor type defined!"
	#endif
}
 25a:	08 95       	ret

0000025c <__tablejump2__>:
 25c:	ee 0f       	add	r30, r30
 25e:	ff 1f       	adc	r31, r31

00000260 <__tablejump__>:
 260:	05 90       	lpm	r0, Z+
 262:	f4 91       	lpm	r31, Z
 264:	e0 2d       	mov	r30, r0
 266:	09 94       	ijmp

00000268 <_exit>:
 268:	f8 94       	cli

0000026a <__stop_program>:
 26a:	ff cf       	rjmp	.-2      	; 0x26a <__stop_program>
