
ATmega8.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000186  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  00000186  000001fa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000001fc  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000058  00000000  00000000  0000022c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   0000024b  00000000  00000000  00000284  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000162  00000000  00000000  000004cf  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000214  00000000  00000000  00000631  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000088  00000000  00000000  00000848  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000001ff  00000000  00000000  000008d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000020b  00000000  00000000  00000acf  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000038  00000000  00000000  00000cda  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	1a c0       	rjmp	.+52     	; 0x36 <__ctors_end>
   2:	2c c0       	rjmp	.+88     	; 0x5c <__bad_interrupt>
   4:	2b c0       	rjmp	.+86     	; 0x5c <__bad_interrupt>
   6:	2a c0       	rjmp	.+84     	; 0x5c <__bad_interrupt>
   8:	29 c0       	rjmp	.+82     	; 0x5c <__bad_interrupt>
   a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
   c:	27 c0       	rjmp	.+78     	; 0x5c <__bad_interrupt>
   e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
  10:	25 c0       	rjmp	.+74     	; 0x5c <__bad_interrupt>
  12:	24 c0       	rjmp	.+72     	; 0x5c <__bad_interrupt>
  14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
  16:	22 c0       	rjmp	.+68     	; 0x5c <__bad_interrupt>
  18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
  1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
  1c:	1f c0       	rjmp	.+62     	; 0x5c <__bad_interrupt>
  1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
  20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
  22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
  24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>
  26:	89 c0       	rjmp	.+274    	; 0x13a <analogRead+0x2a>
  28:	8c c0       	rjmp	.+280    	; 0x142 <analogRead+0x32>
  2a:	8d c0       	rjmp	.+282    	; 0x146 <analogRead+0x36>
  2c:	8e c0       	rjmp	.+284    	; 0x14a <analogRead+0x3a>
  2e:	91 c0       	rjmp	.+290    	; 0x152 <analogRead+0x42>
  30:	92 c0       	rjmp	.+292    	; 0x156 <analogRead+0x46>
  32:	95 c0       	rjmp	.+298    	; 0x15e <analogRead+0x4e>
  34:	98 c0       	rjmp	.+304    	; 0x166 <analogRead+0x56>

00000036 <__ctors_end>:
  36:	11 24       	eor	r1, r1
  38:	1f be       	out	0x3f, r1	; 63
  3a:	cf e5       	ldi	r28, 0x5F	; 95
  3c:	d4 e0       	ldi	r29, 0x04	; 4
  3e:	de bf       	out	0x3e, r29	; 62
  40:	cd bf       	out	0x3d, r28	; 61

00000042 <__do_copy_data>:
  42:	10 e0       	ldi	r17, 0x00	; 0
  44:	a0 e6       	ldi	r26, 0x60	; 96
  46:	b0 e0       	ldi	r27, 0x00	; 0
  48:	e6 e8       	ldi	r30, 0x86	; 134
  4a:	f1 e0       	ldi	r31, 0x01	; 1
  4c:	02 c0       	rjmp	.+4      	; 0x52 <__do_copy_data+0x10>
  4e:	05 90       	lpm	r0, Z+
  50:	0d 92       	st	X+, r0
  52:	a2 36       	cpi	r26, 0x62	; 98
  54:	b1 07       	cpc	r27, r17
  56:	d9 f7       	brne	.-10     	; 0x4e <__do_copy_data+0xc>
  58:	02 d0       	rcall	.+4      	; 0x5e <main>
  5a:	93 c0       	rjmp	.+294    	; 0x182 <_exit>

0000005c <__bad_interrupt>:
  5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <main>:


int main(void)
{
	uint16_t DATA;
	DDRD |=(1<<PD0);//pin PD0 set as OUTPUT 
  5e:	88 9a       	sbi	0x11, 0	; 17

	//ADC_INIT(128,AREF);
	
	while(1)

	{	DATA = analogRead(A0);//pin ADC0 set as INPUT
  60:	80 e0       	ldi	r24, 0x00	; 0
  62:	56 d0       	rcall	.+172    	; 0x110 <analogRead>


		if (DATA>=512)
  64:	81 15       	cp	r24, r1
  66:	92 40       	sbci	r25, 0x02	; 2
  68:	10 f0       	brcs	.+4      	; 0x6e <main+0x10>
		{
			PORTD |=(1<<PD0);
  6a:	90 9a       	sbi	0x12, 0	; 18
  6c:	f9 cf       	rjmp	.-14     	; 0x60 <main+0x2>
		}
		else
		{
			PORTD &= ~(1<<PD0);
  6e:	90 98       	cbi	0x12, 0	; 18
  70:	f7 cf       	rjmp	.-18     	; 0x60 <main+0x2>

00000072 <ADC_PRESCALER_SET>:
		|| defined(__AVR_ATmega8__)\
		|| defined(__AVR_ATmega48__) || defined(__AVR_ATmega48A__) || defined(__AVR_ATmega48P__) || defined(__AVR_ATmega48PA__) || defined(__AVR_ATmega48PB__)\
		|| defined(__AVR_ATmega88__) || defined(__AVR_ATmega88A__) || defined(__AVR_ATmega88P__) || defined(__AVR_ATmega88PA__) || defined(__AVR_ATmega88PB__)\
		|| defined(__AVR_ATmega168__) || defined(__AVR_ATmega168P__) || defined(__AVR_ATmega168A__) || defined(__AVR_ATmega168PA__) || defined(__AVR_ATmega168PB__)\
		|| defined(__AVR_ATmega328__) || defined(__AVR_ATmega328P__)
			ADCSRA &= (~(1<<ADPS2)) & (~(1<<ADPS1)) & (~(1<<ADPS0)) ; // clear ADPS2:ADPS0 for initialization
  72:	96 b1       	in	r25, 0x06	; 6
  74:	98 7f       	andi	r25, 0xF8	; 248
  76:	96 b9       	out	0x06, r25	; 6
	
		switch(prescaler)
  78:	80 31       	cpi	r24, 0x10	; 16
  7a:	b9 f0       	breq	.+46     	; 0xaa <ADC_PRESCALER_SET+0x38>
  7c:	38 f4       	brcc	.+14     	; 0x8c <ADC_PRESCALER_SET+0x1a>
  7e:	84 30       	cpi	r24, 0x04	; 4
  80:	71 f0       	breq	.+28     	; 0x9e <ADC_PRESCALER_SET+0x2c>
  82:	88 30       	cpi	r24, 0x08	; 8
  84:	71 f0       	breq	.+28     	; 0xa2 <ADC_PRESCALER_SET+0x30>
  86:	82 30       	cpi	r24, 0x02	; 2
  88:	f1 f4       	brne	.+60     	; 0xc6 <ADC_PRESCALER_SET+0x54>
  8a:	07 c0       	rjmp	.+14     	; 0x9a <ADC_PRESCALER_SET+0x28>
  8c:	80 34       	cpi	r24, 0x40	; 64
  8e:	99 f0       	breq	.+38     	; 0xb6 <ADC_PRESCALER_SET+0x44>
  90:	80 38       	cpi	r24, 0x80	; 128
  92:	a9 f0       	breq	.+42     	; 0xbe <ADC_PRESCALER_SET+0x4c>
  94:	80 32       	cpi	r24, 0x20	; 32
  96:	b9 f4       	brne	.+46     	; 0xc6 <ADC_PRESCALER_SET+0x54>
  98:	0a c0       	rjmp	.+20     	; 0xae <ADC_PRESCALER_SET+0x3c>
		{
			case 2:ADCSRA |= (1<<ADPS0);//-----------------------------------  0 0 1
  9a:	30 9a       	sbi	0x06, 0	; 6
			break;
  9c:	08 95       	ret
			case 4:ADCSRA |= (1<<ADPS1);//-----------------------------------  0 1 0
  9e:	31 9a       	sbi	0x06, 1	; 6
			break;
  a0:	08 95       	ret
			case 8:ADCSRA |= (1<<ADPS1) | (1<<ADPS0);//----------------------  0 1 1
  a2:	86 b1       	in	r24, 0x06	; 6
  a4:	83 60       	ori	r24, 0x03	; 3
  a6:	86 b9       	out	0x06, r24	; 6
			break;
  a8:	08 95       	ret
			case 16:ADCSRA |= (1<<ADPS2);//----------------------------------  1 0 0
  aa:	32 9a       	sbi	0x06, 2	; 6
			break;
  ac:	08 95       	ret
			case 32:ADCSRA |= (1<<ADPS2) | (1<<ADPS0);//---------------------  1 0 1
  ae:	86 b1       	in	r24, 0x06	; 6
  b0:	85 60       	ori	r24, 0x05	; 5
  b2:	86 b9       	out	0x06, r24	; 6
			break;
  b4:	08 95       	ret
			case 64:ADCSRA |= (1<<ADPS2) | (1<<ADPS1);//---------------------  1 1 0
  b6:	86 b1       	in	r24, 0x06	; 6
  b8:	86 60       	ori	r24, 0x06	; 6
  ba:	86 b9       	out	0x06, r24	; 6
			break;
  bc:	08 95       	ret
			case 128:ADCSRA |= (1<<ADPS2) | (1<<ADPS1) | (1<<ADPS0);//-------  1 1 1
  be:	86 b1       	in	r24, 0x06	; 6
  c0:	87 60       	ori	r24, 0x07	; 7
  c2:	86 b9       	out	0x06, r24	; 6
			break;
  c4:	08 95       	ret
			default:ADCSRA &= (~(1<<ADPS2)) & (~(1<<ADPS1)) & (~(1<<ADPS0));// 0 0 0
  c6:	86 b1       	in	r24, 0x06	; 6
  c8:	88 7f       	andi	r24, 0xF8	; 248
  ca:	86 b9       	out	0x06, r24	; 6
  cc:	08 95       	ret

000000ce <ADC_voltage_Reference>:
		|| defined(__AVR_ATmega8__)\
		|| defined(__AVR_ATmega48__) || defined(__AVR_ATmega48A__) || defined(__AVR_ATmega48P__) || defined(__AVR_ATmega48PA__) || defined(__AVR_ATmega48PB__)\
		|| defined(__AVR_ATmega88__) || defined(__AVR_ATmega88A__) || defined(__AVR_ATmega88P__) || defined(__AVR_ATmega88PA__) || defined(__AVR_ATmega88PB__)\
		|| defined(__AVR_ATmega168__) || defined(__AVR_ATmega168P__) || defined(__AVR_ATmega168A__) || defined(__AVR_ATmega168PA__) || defined(__AVR_ATmega168PB__)\
		||defined(__AVR_ATmega328__) || defined(__AVR_ATmega328P__)
		ADMUX &= (~(1<<REFS0)) & (~(1<<REFS1)); // clear REFS1:REFS0 for initialization
  ce:	97 b1       	in	r25, 0x07	; 7
  d0:	9f 73       	andi	r25, 0x3F	; 63
  d2:	97 b9       	out	0x07, r25	; 7
		ADMUX |= (1<<REFS0); // Default AVCC has been set
  d4:	3e 9a       	sbi	0x07, 6	; 7
	
		if(Reference_Voltage==AREF){ADMUX &= (~(1<<REFS0)) & (~(1<<REFS1));}
  d6:	81 11       	cpse	r24, r1
  d8:	04 c0       	rjmp	.+8      	; 0xe2 <ADC_voltage_Reference+0x14>
  da:	87 b1       	in	r24, 0x07	; 7
  dc:	8f 73       	andi	r24, 0x3F	; 63
  de:	87 b9       	out	0x07, r24	; 7
  e0:	08 95       	ret
		else if (Reference_Voltage==AVCC){ADMUX |= (1<<REFS0);}
  e2:	81 30       	cpi	r24, 0x01	; 1
  e4:	11 f4       	brne	.+4      	; 0xea <ADC_voltage_Reference+0x1c>
  e6:	3e 9a       	sbi	0x07, 6	; 7
  e8:	08 95       	ret
		else if (Reference_Voltage==INTERNAL){ADMUX |= (1<<REFS1) | (1<<REFS0);}
  ea:	83 30       	cpi	r24, 0x03	; 3
  ec:	21 f4       	brne	.+8      	; 0xf6 <ADC_voltage_Reference+0x28>
  ee:	87 b1       	in	r24, 0x07	; 7
  f0:	80 6c       	ori	r24, 0xC0	; 192
  f2:	87 b9       	out	0x07, r24	; 7
  f4:	08 95       	ret
		else{ADMUX |= (1<<REFS0);}
  f6:	3e 9a       	sbi	0x07, 6	; 7
  f8:	08 95       	ret

000000fa <ADC_INIT>:
//	------------possible parameter---------
//	prescaler = 2,4,8,16,32,64,128
//  Voltage_Reference = AREF,AVCC,INTERNAL

void ADC_INIT(uint8_t prescaler, uint8_t Voltage_Reference)
{
  fa:	cf 93       	push	r28
  fc:	c6 2f       	mov	r28, r22
	ADC_SINGLE_INIT=0; //when ADC_INIT() call by user so we dont need to again execute ADC_INIT() inside the analogRead()
  fe:	10 92 60 00 	sts	0x0060, r1
		|| defined(__AVR_ATmega48__) || defined(__AVR_ATmega48A__) || defined(__AVR_ATmega48P__) || defined(__AVR_ATmega48PA__) || defined(__AVR_ATmega48PB__)\
		|| defined(__AVR_ATmega88__) || defined(__AVR_ATmega88A__) || defined(__AVR_ATmega88P__) || defined(__AVR_ATmega88PA__) || defined(__AVR_ATmega88PB__)\
		|| defined(__AVR_ATmega168__) || defined(__AVR_ATmega168P__) || defined(__AVR_ATmega168A__) || defined(__AVR_ATmega168PA__) || defined(__AVR_ATmega168PB__)\
		|| defined(__AVR_ATmega328__) || defined(__AVR_ATmega328P__)
	
		ADCSRA |= (1<<ADEN); // ADC Enable
 102:	37 9a       	sbi	0x06, 7	; 6
		ADC_PRESCALER_SET(prescaler); // set sampling frequency by prescaler bit
 104:	b6 df       	rcall	.-148    	; 0x72 <ADC_PRESCALER_SET>
		ADC_voltage_Reference(Voltage_Reference); //set voltage reference //by default AVCC has been selected
 106:	8c 2f       	mov	r24, r28
 108:	e2 df       	rcall	.-60     	; 0xce <ADC_voltage_Reference>
		ADMUX &= ~(1<<ADLAR); //left adjust off // Though by default left adjust off // this line use for more convenient for future developer
 10a:	3d 98       	cbi	0x07, 5	; 7
	#endif
}
 10c:	cf 91       	pop	r28
 10e:	08 95       	ret

00000110 <analogRead>:

//################################################################################################################################################################################
//===========================================================|   ADC_READ() Start	|=============================================================================================
//################################################################################################################################################################################
uint16_t analogRead(uint8_t channel)
{
 110:	cf 93       	push	r28
 112:	c8 2f       	mov	r28, r24
	
	if(ADC_SINGLE_INIT==1)
 114:	80 91 60 00 	lds	r24, 0x0060
 118:	81 30       	cpi	r24, 0x01	; 1
 11a:	19 f4       	brne	.+6      	; 0x122 <analogRead+0x12>
	{
		ADC_INIT(128, AVCC); // we set [ADC_SINGLE_INIT= 0] inside the ADC_INIT() function
 11c:	61 e0       	ldi	r22, 0x01	; 1
 11e:	80 e8       	ldi	r24, 0x80	; 128
 120:	ec df       	rcall	.-40     	; 0xfa <ADC_INIT>
	#elif defined(__AVR_ATmega8__)\
		|| defined(__AVR_ATmega48__) || defined(__AVR_ATmega48A__) || defined(__AVR_ATmega48P__) || defined(__AVR_ATmega48PA__) || defined(__AVR_ATmega48PB__)\
		|| defined(__AVR_ATmega88__) || defined(__AVR_ATmega88A__) || defined(__AVR_ATmega88P__) || defined(__AVR_ATmega88PA__) || defined(__AVR_ATmega88PB__)\
		|| defined(__AVR_ATmega168__) || defined(__AVR_ATmega168P__) || defined(__AVR_ATmega168A__) || defined(__AVR_ATmega168PA__) || defined(__AVR_ATmega168PB__)\
		||defined(__AVR_ATmega328__) || defined(__AVR_ATmega328P__)
		ADMUX &=  (~(1<<MUX3)) & (~(1<<MUX2)) & (~(1<<MUX1)) & (~(1<<MUX0)); // set channel ADC0 default
 122:	87 b1       	in	r24, 0x07	; 7
 124:	80 7f       	andi	r24, 0xF0	; 240
 126:	87 b9       	out	0x07, r24	; 7
	
		switch(channel)
 128:	8c 2f       	mov	r24, r28
 12a:	90 e0       	ldi	r25, 0x00	; 0
 12c:	88 30       	cpi	r24, 0x08	; 8
 12e:	91 05       	cpc	r25, r1
 130:	f0 f4       	brcc	.+60     	; 0x16e <analogRead+0x5e>
 132:	fc 01       	movw	r30, r24
 134:	ed 5e       	subi	r30, 0xED	; 237
 136:	ff 4f       	sbci	r31, 0xFF	; 255
 138:	09 94       	ijmp
		{
			case 0:ADMUX &=  (~(1<<MUX3)) & (~(1<<MUX2)) & (~(1<<MUX1)) & (~(1<<MUX0)); //---------- 0 0 0 0 0
 13a:	87 b1       	in	r24, 0x07	; 7
 13c:	80 7f       	andi	r24, 0xF0	; 240
 13e:	87 b9       	out	0x07, r24	; 7
			break;
 140:	19 c0       	rjmp	.+50     	; 0x174 <analogRead+0x64>
			case 1:ADMUX |= (1<<MUX0);//-------------------------------------------------------------------------- 0 0 0 0 1
 142:	38 9a       	sbi	0x07, 0	; 7
			break;
 144:	17 c0       	rjmp	.+46     	; 0x174 <analogRead+0x64>
			case 2:ADMUX |= (1<<MUX1);//-------------------------------------------------------------------------- 0 0 0 1 0
 146:	39 9a       	sbi	0x07, 1	; 7
			break;
 148:	15 c0       	rjmp	.+42     	; 0x174 <analogRead+0x64>
			case 3:ADMUX |= (1<<MUX1) | (1<<MUX0);//-------------------------------------------------------------- 0 0 0 1 1
 14a:	87 b1       	in	r24, 0x07	; 7
 14c:	83 60       	ori	r24, 0x03	; 3
 14e:	87 b9       	out	0x07, r24	; 7
			break;
 150:	11 c0       	rjmp	.+34     	; 0x174 <analogRead+0x64>
			case 4:ADMUX |= (1<<MUX2);//-------------------------------------------------------------------------- 0 0 1 0 0
 152:	3a 9a       	sbi	0x07, 2	; 7
			break;
 154:	0f c0       	rjmp	.+30     	; 0x174 <analogRead+0x64>
			case 5:ADMUX |= (1<<MUX2) | (1<<MUX0);//-------------------------------------------------------------- 0 0 1 0 1
 156:	87 b1       	in	r24, 0x07	; 7
 158:	85 60       	ori	r24, 0x05	; 5
 15a:	87 b9       	out	0x07, r24	; 7
			break;
 15c:	0b c0       	rjmp	.+22     	; 0x174 <analogRead+0x64>
			case 6:ADMUX |= (1<<MUX2) | (1<<MUX1);//-------------------------------------------------------------- 0 0 1 1 0
 15e:	87 b1       	in	r24, 0x07	; 7
 160:	86 60       	ori	r24, 0x06	; 6
 162:	87 b9       	out	0x07, r24	; 7
			break;
 164:	07 c0       	rjmp	.+14     	; 0x174 <analogRead+0x64>
			case 7:ADMUX |= (1<<MUX2) | (1<<MUX1) | (1<<MUX0);//-------------------------------------------------- 0 0 1 1 1
 166:	87 b1       	in	r24, 0x07	; 7
 168:	87 60       	ori	r24, 0x07	; 7
 16a:	87 b9       	out	0x07, r24	; 7
			break;
 16c:	03 c0       	rjmp	.+6      	; 0x174 <analogRead+0x64>
			default:ADMUX &= (~(1<<MUX3)) & (~(1<<MUX2)) & (~(1<<MUX1)) & (~(1<<MUX0)); // set channel ADC0 default
 16e:	87 b1       	in	r24, 0x07	; 7
 170:	80 7f       	andi	r24, 0xF0	; 240
 172:	87 b9       	out	0x07, r24	; 7
		}
		ADCSRA |=(1<<ADSC); // ADC conversion start
 174:	36 9a       	sbi	0x06, 6	; 6
	
		while((ADCSRA & (1<<ADIF)) == 0){}; // wait for end conversion ( after conversion ADIF bit will be set automatically )
 176:	34 9b       	sbis	0x06, 4	; 6
 178:	fe cf       	rjmp	.-4      	; 0x176 <analogRead+0x66>
		//uint8_t high,low;
		//high=ADCH;
		//low=ADCL;
		return ADCW;// when conversion finished all data will be stored in ADCW
 17a:	84 b1       	in	r24, 0x04	; 4
 17c:	95 b1       	in	r25, 0x05	; 5
	
	
	#else
		#error "No processor type defined!"
	#endif
}
 17e:	cf 91       	pop	r28
 180:	08 95       	ret

00000182 <_exit>:
 182:	f8 94       	cli

00000184 <__stop_program>:
 184:	ff cf       	rjmp	.-2      	; 0x184 <__stop_program>
