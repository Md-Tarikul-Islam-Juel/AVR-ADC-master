
ATmega644.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000260  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .comment      00000030  00000000  00000000  000002b4  2**0
                  CONTENTS, READONLY
  2 .debug_aranges 00000058  00000000  00000000  000002e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   00000252  00000000  00000000  0000033c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 0000016f  00000000  00000000  0000058e  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   00000215  00000000  00000000  000006fd  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000080  00000000  00000000  00000914  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000001b8  00000000  00000000  00000994  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000294  00000000  00000000  00000b4c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000038  00000000  00000000  00000de0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 40 00 	jmp	0x80	; 0x80 <__ctors_end>
   4:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>
   8:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>
   c:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>
  10:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>
  14:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>
  18:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>
  1c:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>
  20:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>
  24:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>
  28:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>
  2c:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>
  30:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>
  34:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>
  38:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>
  3c:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>
  40:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>
  44:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>
  48:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>
  4c:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>
  50:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>
  54:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>
  58:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>
  5c:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>
  60:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>
  64:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>
  68:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>
  6c:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>
  70:	e6 00       	.word	0x00e6	; ????
  72:	ec 00       	.word	0x00ec	; ????
  74:	f2 00       	.word	0x00f2	; ????
  76:	f8 00       	.word	0x00f8	; ????
  78:	fe 00       	.word	0x00fe	; ????
  7a:	04 01       	movw	r0, r8
  7c:	0a 01       	movw	r0, r20
  7e:	10 01       	movw	r2, r0

00000080 <__ctors_end>:
  80:	11 24       	eor	r1, r1
  82:	1f be       	out	0x3f, r1	; 63
  84:	cf ef       	ldi	r28, 0xFF	; 255
  86:	d0 e1       	ldi	r29, 0x10	; 16
  88:	de bf       	out	0x3e, r29	; 62
  8a:	cd bf       	out	0x3d, r28	; 61
  8c:	0e 94 4c 00 	call	0x98	; 0x98 <main>
  90:	0c 94 2e 01 	jmp	0x25c	; 0x25c <_exit>

00000094 <__bad_interrupt>:
  94:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000098 <main>:


int main(void)
{
	uint16_t DATA;
	DDRD |=(1<<PD0);//pin PD0 set as OUTPUT 
  98:	50 9a       	sbi	0x0a, 0	; 10

	ADC_INIT(128,AVCC);
  9a:	61 e0       	ldi	r22, 0x01	; 1
  9c:	80 e8       	ldi	r24, 0x80	; 128
  9e:	0e 94 c5 00 	call	0x18a	; 0x18a <ADC_INIT>
	

	while(1)

	{	DATA = ADC_READ(0);//pin ADC0 set as INPUT
  a2:	80 e0       	ldi	r24, 0x00	; 0
  a4:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <ADC_READ>


		if (DATA>=512)
  a8:	81 15       	cp	r24, r1
  aa:	92 40       	sbci	r25, 0x02	; 2
  ac:	10 f0       	brcs	.+4      	; 0xb2 <main+0x1a>
		{
			PORTD |=(1<<PD0);
  ae:	58 9a       	sbi	0x0b, 0	; 11
  b0:	f8 cf       	rjmp	.-16     	; 0xa2 <main+0xa>
		}
		else
		{
			PORTD &= ~(1<<PD0);
  b2:	58 98       	cbi	0x0b, 0	; 11
  b4:	f6 cf       	rjmp	.-20     	; 0xa2 <main+0xa>

000000b6 <ADC_PRESCALER_SET>:
		|| defined(__AVR_ATmega8__)\
		|| defined(__AVR_ATmega48__) || defined(__AVR_ATmega48A__) || defined(__AVR_ATmega48P__) || defined(__AVR_ATmega48PA__) || defined(__AVR_ATmega48PB__)\
		|| defined(__AVR_ATmega88__) || defined(__AVR_ATmega88A__) || defined(__AVR_ATmega88P__) || defined(__AVR_ATmega88PA__) || defined(__AVR_ATmega88PB__)\
		|| defined(__AVR_ATmega168__) || defined(__AVR_ATmega168P__) || defined(__AVR_ATmega168A__) || defined(__AVR_ATmega168PA__) || defined(__AVR_ATmega168PB__)\
		|| defined(__AVR_ATmega328__) || defined(__AVR_ATmega328P__)
			ADCSRA &= (~(1<<ADPS2)) & (~(1<<ADPS1)) & (~(1<<ADPS0)) ; // clear ADPS2:ADPS0 for initialization
  b6:	ea e7       	ldi	r30, 0x7A	; 122
  b8:	f0 e0       	ldi	r31, 0x00	; 0
  ba:	90 81       	ld	r25, Z
  bc:	98 7f       	andi	r25, 0xF8	; 248
  be:	90 83       	st	Z, r25
	
		switch(prescaler)
  c0:	80 31       	cpi	r24, 0x10	; 16
  c2:	09 f1       	breq	.+66     	; 0x106 <ADC_PRESCALER_SET+0x50>
  c4:	38 f4       	brcc	.+14     	; 0xd4 <ADC_PRESCALER_SET+0x1e>
  c6:	84 30       	cpi	r24, 0x04	; 4
  c8:	91 f0       	breq	.+36     	; 0xee <ADC_PRESCALER_SET+0x38>
  ca:	88 30       	cpi	r24, 0x08	; 8
  cc:	b1 f0       	breq	.+44     	; 0xfa <ADC_PRESCALER_SET+0x44>
  ce:	82 30       	cpi	r24, 0x02	; 2
  d0:	91 f5       	brne	.+100    	; 0x136 <ADC_PRESCALER_SET+0x80>
  d2:	07 c0       	rjmp	.+14     	; 0xe2 <ADC_PRESCALER_SET+0x2c>
  d4:	80 34       	cpi	r24, 0x40	; 64
  d6:	19 f1       	breq	.+70     	; 0x11e <ADC_PRESCALER_SET+0x68>
  d8:	80 38       	cpi	r24, 0x80	; 128
  da:	39 f1       	breq	.+78     	; 0x12a <ADC_PRESCALER_SET+0x74>
  dc:	80 32       	cpi	r24, 0x20	; 32
  de:	59 f5       	brne	.+86     	; 0x136 <ADC_PRESCALER_SET+0x80>
  e0:	18 c0       	rjmp	.+48     	; 0x112 <ADC_PRESCALER_SET+0x5c>
		{
			case 2:ADCSRA |= (1<<ADPS0);//-----------------------------------  0 0 1
  e2:	ea e7       	ldi	r30, 0x7A	; 122
  e4:	f0 e0       	ldi	r31, 0x00	; 0
  e6:	80 81       	ld	r24, Z
  e8:	81 60       	ori	r24, 0x01	; 1
  ea:	80 83       	st	Z, r24
			break;
  ec:	08 95       	ret
			case 4:ADCSRA |= (1<<ADPS1);//-----------------------------------  0 1 0
  ee:	ea e7       	ldi	r30, 0x7A	; 122
  f0:	f0 e0       	ldi	r31, 0x00	; 0
  f2:	80 81       	ld	r24, Z
  f4:	82 60       	ori	r24, 0x02	; 2
  f6:	80 83       	st	Z, r24
			break;
  f8:	08 95       	ret
			case 8:ADCSRA |= (1<<ADPS1) | (1<<ADPS0);//----------------------  0 1 1
  fa:	ea e7       	ldi	r30, 0x7A	; 122
  fc:	f0 e0       	ldi	r31, 0x00	; 0
  fe:	80 81       	ld	r24, Z
 100:	83 60       	ori	r24, 0x03	; 3
 102:	80 83       	st	Z, r24
			break;
 104:	08 95       	ret
			case 16:ADCSRA |= (1<<ADPS2);//----------------------------------  1 0 0
 106:	ea e7       	ldi	r30, 0x7A	; 122
 108:	f0 e0       	ldi	r31, 0x00	; 0
 10a:	80 81       	ld	r24, Z
 10c:	84 60       	ori	r24, 0x04	; 4
 10e:	80 83       	st	Z, r24
			break;
 110:	08 95       	ret
			case 32:ADCSRA |= (1<<ADPS2) | (1<<ADPS0);//---------------------  1 0 1
 112:	ea e7       	ldi	r30, 0x7A	; 122
 114:	f0 e0       	ldi	r31, 0x00	; 0
 116:	80 81       	ld	r24, Z
 118:	85 60       	ori	r24, 0x05	; 5
 11a:	80 83       	st	Z, r24
			break;
 11c:	08 95       	ret
			case 64:ADCSRA |= (1<<ADPS2) | (1<<ADPS1);//---------------------  1 1 0
 11e:	ea e7       	ldi	r30, 0x7A	; 122
 120:	f0 e0       	ldi	r31, 0x00	; 0
 122:	80 81       	ld	r24, Z
 124:	86 60       	ori	r24, 0x06	; 6
 126:	80 83       	st	Z, r24
			break;
 128:	08 95       	ret
			case 128:ADCSRA |= (1<<ADPS2) | (1<<ADPS1) | (1<<ADPS0);//-------  1 1 1
 12a:	ea e7       	ldi	r30, 0x7A	; 122
 12c:	f0 e0       	ldi	r31, 0x00	; 0
 12e:	80 81       	ld	r24, Z
 130:	87 60       	ori	r24, 0x07	; 7
 132:	80 83       	st	Z, r24
			break;
 134:	08 95       	ret
			default:ADCSRA &= (~(1<<ADPS2)) & (~(1<<ADPS1)) & (~(1<<ADPS0));// 0 0 0
 136:	ea e7       	ldi	r30, 0x7A	; 122
 138:	f0 e0       	ldi	r31, 0x00	; 0
 13a:	80 81       	ld	r24, Z
 13c:	88 7f       	andi	r24, 0xF8	; 248
 13e:	80 83       	st	Z, r24
 140:	08 95       	ret

00000142 <ADC_voltage_Reference>:
		|| defined(__AVR_ATmega8__)\
		|| defined(__AVR_ATmega48__) || defined(__AVR_ATmega48A__) || defined(__AVR_ATmega48P__) || defined(__AVR_ATmega48PA__) || defined(__AVR_ATmega48PB__)\
		|| defined(__AVR_ATmega88__) || defined(__AVR_ATmega88A__) || defined(__AVR_ATmega88P__) || defined(__AVR_ATmega88PA__) || defined(__AVR_ATmega88PB__)\
		|| defined(__AVR_ATmega168__) || defined(__AVR_ATmega168P__) || defined(__AVR_ATmega168A__) || defined(__AVR_ATmega168PA__) || defined(__AVR_ATmega168PB__)\
		||defined(__AVR_ATmega328__) || defined(__AVR_ATmega328P__)
		ADMUX &= (~(1<<REFS0)) & (~(1<<REFS1)); // clear REFS1:REFS0 for initialization
 142:	ec e7       	ldi	r30, 0x7C	; 124
 144:	f0 e0       	ldi	r31, 0x00	; 0
 146:	90 81       	ld	r25, Z
 148:	9f 73       	andi	r25, 0x3F	; 63
 14a:	90 83       	st	Z, r25
		ADMUX |= (1<<REFS0); // Default AVCC has been set
 14c:	90 81       	ld	r25, Z
 14e:	90 64       	ori	r25, 0x40	; 64
 150:	90 83       	st	Z, r25
	
		if(Reference_Voltage==AREF){ADMUX &= (~(1<<REFS0)) & (~(1<<REFS1));}
 152:	81 11       	cpse	r24, r1
 154:	04 c0       	rjmp	.+8      	; 0x15e <ADC_voltage_Reference+0x1c>
 156:	80 81       	ld	r24, Z
 158:	8f 73       	andi	r24, 0x3F	; 63
 15a:	80 83       	st	Z, r24
 15c:	08 95       	ret
		else if (Reference_Voltage==AVCC){ADMUX |= (1<<REFS0);}
 15e:	81 30       	cpi	r24, 0x01	; 1
 160:	31 f4       	brne	.+12     	; 0x16e <ADC_voltage_Reference+0x2c>
 162:	ec e7       	ldi	r30, 0x7C	; 124
 164:	f0 e0       	ldi	r31, 0x00	; 0
 166:	80 81       	ld	r24, Z
 168:	80 64       	ori	r24, 0x40	; 64
 16a:	80 83       	st	Z, r24
 16c:	08 95       	ret
		else if (Reference_Voltage==INTERNAL){ADMUX |= (1<<REFS1) | (1<<REFS0);}
 16e:	83 30       	cpi	r24, 0x03	; 3
 170:	31 f4       	brne	.+12     	; 0x17e <ADC_voltage_Reference+0x3c>
 172:	ec e7       	ldi	r30, 0x7C	; 124
 174:	f0 e0       	ldi	r31, 0x00	; 0
 176:	80 81       	ld	r24, Z
 178:	80 6c       	ori	r24, 0xC0	; 192
 17a:	80 83       	st	Z, r24
 17c:	08 95       	ret
		else{ADMUX |= (1<<REFS0);}
 17e:	ec e7       	ldi	r30, 0x7C	; 124
 180:	f0 e0       	ldi	r31, 0x00	; 0
 182:	80 81       	ld	r24, Z
 184:	80 64       	ori	r24, 0x40	; 64
 186:	80 83       	st	Z, r24
 188:	08 95       	ret

0000018a <ADC_INIT>:
//	------------possible parameter---------
//	prescaler = 2,4,8,16,32,64,128
//  Voltage_Reference = AREF,AVCC,INTERNAL

void ADC_INIT(uint8_t prescaler, uint8_t Voltage_Reference)
{
 18a:	cf 93       	push	r28
 18c:	c6 2f       	mov	r28, r22
		|| defined(__AVR_ATmega48__) || defined(__AVR_ATmega48A__) || defined(__AVR_ATmega48P__) || defined(__AVR_ATmega48PA__) || defined(__AVR_ATmega48PB__)\
		|| defined(__AVR_ATmega88__) || defined(__AVR_ATmega88A__) || defined(__AVR_ATmega88P__) || defined(__AVR_ATmega88PA__) || defined(__AVR_ATmega88PB__)\
		|| defined(__AVR_ATmega168__) || defined(__AVR_ATmega168P__) || defined(__AVR_ATmega168A__) || defined(__AVR_ATmega168PA__) || defined(__AVR_ATmega168PB__)\
		|| defined(__AVR_ATmega328__) || defined(__AVR_ATmega328P__)
	
		ADCSRA |= (1<<ADEN); // ADC Enable
 18e:	ea e7       	ldi	r30, 0x7A	; 122
 190:	f0 e0       	ldi	r31, 0x00	; 0
 192:	90 81       	ld	r25, Z
 194:	90 68       	ori	r25, 0x80	; 128
 196:	90 83       	st	Z, r25
		ADC_PRESCALER_SET(prescaler); // set sampling frequency by prescaler bit
 198:	0e 94 5b 00 	call	0xb6	; 0xb6 <ADC_PRESCALER_SET>
		ADC_voltage_Reference(Voltage_Reference); //set voltage reference //by default AVCC has been selected
 19c:	8c 2f       	mov	r24, r28
 19e:	0e 94 a1 00 	call	0x142	; 0x142 <ADC_voltage_Reference>
		ADMUX &= ~(1<<ADLAR); //left adjust off // Though by default left adjust off // this line use for more convenient for future developer
 1a2:	ec e7       	ldi	r30, 0x7C	; 124
 1a4:	f0 e0       	ldi	r31, 0x00	; 0
 1a6:	80 81       	ld	r24, Z
 1a8:	8f 7d       	andi	r24, 0xDF	; 223
 1aa:	80 83       	st	Z, r24
	#endif
}
 1ac:	cf 91       	pop	r28
 1ae:	08 95       	ret

000001b0 <ADC_READ>:
		|| defined(__AVR_ATmega164__) || defined(__AVR_ATmega164A__) || defined(__AVR_ATmega164P__) || defined(__AVR_ATmega164PA__)\
		|| defined(__AVR_ATmega324__) || defined(__AVR_ATmega324A__) || defined(__AVR_ATmega324P__) || defined(__AVR_ATmega324PA__)\
		|| defined(__AVR_ATmega644__) || defined(__AVR_ATmega644A__) || defined(__AVR_ATmega644P__) || defined(__AVR_ATmega644PA__)\
		|| defined(__AVR_ATmega1284__) || defined(__AVR_ATmega1284P__)\
		|| defined(__AVR_ATmega8535__)
		ADMUX &= (~(1<<MUX4)) & (~(1<<MUX3)) & (~(1<<MUX2)) & (~(1<<MUX1)) & (~(1<<MUX0)); // set channel ADC0 default
 1b0:	ec e7       	ldi	r30, 0x7C	; 124
 1b2:	f0 e0       	ldi	r31, 0x00	; 0
 1b4:	90 81       	ld	r25, Z
 1b6:	90 7e       	andi	r25, 0xE0	; 224
 1b8:	90 83       	st	Z, r25
		switch(channel)
 1ba:	90 e0       	ldi	r25, 0x00	; 0
 1bc:	88 30       	cpi	r24, 0x08	; 8
 1be:	91 05       	cpc	r25, r1
 1c0:	a8 f5       	brcc	.+106    	; 0x22c <ADC_READ+0x7c>
 1c2:	fc 01       	movw	r30, r24
 1c4:	e8 5c       	subi	r30, 0xC8	; 200
 1c6:	ff 4f       	sbci	r31, 0xFF	; 255
 1c8:	0c 94 28 01 	jmp	0x250	; 0x250 <__tablejump2__>
		{
			case 0:ADMUX &= (~(1<<MUX4)) & (~(1<<MUX3)) & (~(1<<MUX2)) & (~(1<<MUX1)) & (~(1<<MUX0)); //---------- 0 0 0 0 0
 1cc:	ec e7       	ldi	r30, 0x7C	; 124
 1ce:	f0 e0       	ldi	r31, 0x00	; 0
 1d0:	80 81       	ld	r24, Z
 1d2:	80 7e       	andi	r24, 0xE0	; 224
 1d4:	80 83       	st	Z, r24
			break;
 1d6:	2f c0       	rjmp	.+94     	; 0x236 <ADC_READ+0x86>
			case 1:ADMUX |= (1<<MUX0);//-------------------------------------------------------------------------- 0 0 0 0 1
 1d8:	ec e7       	ldi	r30, 0x7C	; 124
 1da:	f0 e0       	ldi	r31, 0x00	; 0
 1dc:	80 81       	ld	r24, Z
 1de:	81 60       	ori	r24, 0x01	; 1
 1e0:	80 83       	st	Z, r24
			break;
 1e2:	29 c0       	rjmp	.+82     	; 0x236 <ADC_READ+0x86>
			case 2:ADMUX |= (1<<MUX1);//-------------------------------------------------------------------------- 0 0 0 1 0
 1e4:	ec e7       	ldi	r30, 0x7C	; 124
 1e6:	f0 e0       	ldi	r31, 0x00	; 0
 1e8:	80 81       	ld	r24, Z
 1ea:	82 60       	ori	r24, 0x02	; 2
 1ec:	80 83       	st	Z, r24
			break;
 1ee:	23 c0       	rjmp	.+70     	; 0x236 <ADC_READ+0x86>
			case 3:ADMUX |= (1<<MUX1) | (1<<MUX0);//-------------------------------------------------------------- 0 0 0 1 1
 1f0:	ec e7       	ldi	r30, 0x7C	; 124
 1f2:	f0 e0       	ldi	r31, 0x00	; 0
 1f4:	80 81       	ld	r24, Z
 1f6:	83 60       	ori	r24, 0x03	; 3
 1f8:	80 83       	st	Z, r24
			break;
 1fa:	1d c0       	rjmp	.+58     	; 0x236 <ADC_READ+0x86>
			case 4:ADMUX |= (1<<MUX2);//-------------------------------------------------------------------------- 0 0 1 0 0
 1fc:	ec e7       	ldi	r30, 0x7C	; 124
 1fe:	f0 e0       	ldi	r31, 0x00	; 0
 200:	80 81       	ld	r24, Z
 202:	84 60       	ori	r24, 0x04	; 4
 204:	80 83       	st	Z, r24
			break;
 206:	17 c0       	rjmp	.+46     	; 0x236 <ADC_READ+0x86>
			case 5:ADMUX |= (1<<MUX2) | (1<<MUX0);//-------------------------------------------------------------- 0 0 1 0 1
 208:	ec e7       	ldi	r30, 0x7C	; 124
 20a:	f0 e0       	ldi	r31, 0x00	; 0
 20c:	80 81       	ld	r24, Z
 20e:	85 60       	ori	r24, 0x05	; 5
 210:	80 83       	st	Z, r24
			break;
 212:	11 c0       	rjmp	.+34     	; 0x236 <ADC_READ+0x86>
			case 6:ADMUX |= (1<<MUX2) | (1<<MUX1);//-------------------------------------------------------------- 0 0 1 1 0
 214:	ec e7       	ldi	r30, 0x7C	; 124
 216:	f0 e0       	ldi	r31, 0x00	; 0
 218:	80 81       	ld	r24, Z
 21a:	86 60       	ori	r24, 0x06	; 6
 21c:	80 83       	st	Z, r24
			break;
 21e:	0b c0       	rjmp	.+22     	; 0x236 <ADC_READ+0x86>
			case 7:ADMUX |= (1<<MUX2) | (1<<MUX1) | (1<<MUX0);//-------------------------------------------------- 0 0 1 1 1
 220:	ec e7       	ldi	r30, 0x7C	; 124
 222:	f0 e0       	ldi	r31, 0x00	; 0
 224:	80 81       	ld	r24, Z
 226:	87 60       	ori	r24, 0x07	; 7
 228:	80 83       	st	Z, r24
			break;
 22a:	05 c0       	rjmp	.+10     	; 0x236 <ADC_READ+0x86>
			default:ADMUX &= (~(1<<MUX4)) & (~(1<<MUX3)) & (~(1<<MUX2)) & (~(1<<MUX1)) & (~(1<<MUX0)); // set channel ADC0 default
 22c:	ec e7       	ldi	r30, 0x7C	; 124
 22e:	f0 e0       	ldi	r31, 0x00	; 0
 230:	80 81       	ld	r24, Z
 232:	80 7e       	andi	r24, 0xE0	; 224
 234:	80 83       	st	Z, r24
		}
		ADCSRA |=(1<<ADSC); // ADC conversion start
 236:	ea e7       	ldi	r30, 0x7A	; 122
 238:	f0 e0       	ldi	r31, 0x00	; 0
 23a:	80 81       	ld	r24, Z
 23c:	80 64       	ori	r24, 0x40	; 64
 23e:	80 83       	st	Z, r24
	
		while((ADCSRA & (1<<ADIF)) == 0){}; // wait for end conversion ( after conversion ADIF bit will be set automatically )
 240:	80 81       	ld	r24, Z
 242:	84 ff       	sbrs	r24, 4
 244:	fd cf       	rjmp	.-6      	; 0x240 <ADC_READ+0x90>
		//uint8_t high,low;
		//high=ADCH;
		//low=ADCL;
		return ADCW;// when conversion finished all data will be stored in ADCW
 246:	80 91 78 00 	lds	r24, 0x0078
 24a:	90 91 79 00 	lds	r25, 0x0079
	
	
	#else
		#error "No processor type defined!"
	#endif
}
 24e:	08 95       	ret

00000250 <__tablejump2__>:
 250:	ee 0f       	add	r30, r30
 252:	ff 1f       	adc	r31, r31

00000254 <__tablejump__>:
 254:	05 90       	lpm	r0, Z+
 256:	f4 91       	lpm	r31, Z
 258:	e0 2d       	mov	r30, r0
 25a:	09 94       	ijmp

0000025c <_exit>:
 25c:	f8 94       	cli

0000025e <__stop_program>:
 25e:	ff cf       	rjmp	.-2      	; 0x25e <__stop_program>
