
ATmega88.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000208  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .comment      00000030  00000000  00000000  0000025c  2**0
                  CONTENTS, READONLY
  2 .debug_aranges 00000058  00000000  00000000  0000028c  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   00000252  00000000  00000000  000002e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 0000016f  00000000  00000000  00000536  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   00000212  00000000  00000000  000006a5  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000080  00000000  00000000  000008b8  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000001b4  00000000  00000000  00000938  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000294  00000000  00000000  00000aec  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000038  00000000  00000000  00000d80  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	21 c0       	rjmp	.+66     	; 0x44 <__ctors_end>
   2:	28 c0       	rjmp	.+80     	; 0x54 <__bad_interrupt>
   4:	27 c0       	rjmp	.+78     	; 0x54 <__bad_interrupt>
   6:	26 c0       	rjmp	.+76     	; 0x54 <__bad_interrupt>
   8:	25 c0       	rjmp	.+74     	; 0x54 <__bad_interrupt>
   a:	24 c0       	rjmp	.+72     	; 0x54 <__bad_interrupt>
   c:	23 c0       	rjmp	.+70     	; 0x54 <__bad_interrupt>
   e:	22 c0       	rjmp	.+68     	; 0x54 <__bad_interrupt>
  10:	21 c0       	rjmp	.+66     	; 0x54 <__bad_interrupt>
  12:	20 c0       	rjmp	.+64     	; 0x54 <__bad_interrupt>
  14:	1f c0       	rjmp	.+62     	; 0x54 <__bad_interrupt>
  16:	1e c0       	rjmp	.+60     	; 0x54 <__bad_interrupt>
  18:	1d c0       	rjmp	.+58     	; 0x54 <__bad_interrupt>
  1a:	1c c0       	rjmp	.+56     	; 0x54 <__bad_interrupt>
  1c:	1b c0       	rjmp	.+54     	; 0x54 <__bad_interrupt>
  1e:	1a c0       	rjmp	.+52     	; 0x54 <__bad_interrupt>
  20:	19 c0       	rjmp	.+50     	; 0x54 <__bad_interrupt>
  22:	18 c0       	rjmp	.+48     	; 0x54 <__bad_interrupt>
  24:	17 c0       	rjmp	.+46     	; 0x54 <__bad_interrupt>
  26:	16 c0       	rjmp	.+44     	; 0x54 <__bad_interrupt>
  28:	15 c0       	rjmp	.+42     	; 0x54 <__bad_interrupt>
  2a:	14 c0       	rjmp	.+40     	; 0x54 <__bad_interrupt>
  2c:	13 c0       	rjmp	.+38     	; 0x54 <__bad_interrupt>
  2e:	12 c0       	rjmp	.+36     	; 0x54 <__bad_interrupt>
  30:	11 c0       	rjmp	.+34     	; 0x54 <__bad_interrupt>
  32:	10 c0       	rjmp	.+32     	; 0x54 <__bad_interrupt>
  34:	a5 c0       	rjmp	.+330    	; 0x180 <ADC_READ+0x1a>
  36:	aa c0       	rjmp	.+340    	; 0x18c <ADC_READ+0x26>
  38:	af c0       	rjmp	.+350    	; 0x198 <ADC_READ+0x32>
  3a:	b4 c0       	rjmp	.+360    	; 0x1a4 <ADC_READ+0x3e>
  3c:	b9 c0       	rjmp	.+370    	; 0x1b0 <ADC_READ+0x4a>
  3e:	be c0       	rjmp	.+380    	; 0x1bc <ADC_READ+0x56>
  40:	c3 c0       	rjmp	.+390    	; 0x1c8 <ADC_READ+0x62>
  42:	c8 c0       	rjmp	.+400    	; 0x1d4 <ADC_READ+0x6e>

00000044 <__ctors_end>:
  44:	11 24       	eor	r1, r1
  46:	1f be       	out	0x3f, r1	; 63
  48:	cf ef       	ldi	r28, 0xFF	; 255
  4a:	d4 e0       	ldi	r29, 0x04	; 4
  4c:	de bf       	out	0x3e, r29	; 62
  4e:	cd bf       	out	0x3d, r28	; 61
  50:	02 d0       	rcall	.+4      	; 0x56 <main>
  52:	d8 c0       	rjmp	.+432    	; 0x204 <_exit>

00000054 <__bad_interrupt>:
  54:	d5 cf       	rjmp	.-86     	; 0x0 <__vectors>

00000056 <main>:


int main(void)
{
	uint16_t DATA;
	DDRD |=(1<<PD0);//pin PD0 set as OUTPUT 
  56:	50 9a       	sbi	0x0a, 0	; 10

	ADC_INIT(128,AVCC);
  58:	61 e0       	ldi	r22, 0x01	; 1
  5a:	80 e8       	ldi	r24, 0x80	; 128
  5c:	73 d0       	rcall	.+230    	; 0x144 <ADC_INIT>
	

	while(1)

	{	DATA = ADC_READ(0);//pin ADC0 set as INPUT
  5e:	80 e0       	ldi	r24, 0x00	; 0
  60:	82 d0       	rcall	.+260    	; 0x166 <ADC_READ>


		if (DATA>=512)
  62:	81 15       	cp	r24, r1
  64:	92 40       	sbci	r25, 0x02	; 2
  66:	10 f0       	brcs	.+4      	; 0x6c <main+0x16>
		{
			PORTD |=(1<<PD0);
  68:	58 9a       	sbi	0x0b, 0	; 11
  6a:	f9 cf       	rjmp	.-14     	; 0x5e <main+0x8>
		}
		else
		{
			PORTD &= ~(1<<PD0);
  6c:	58 98       	cbi	0x0b, 0	; 11
  6e:	f7 cf       	rjmp	.-18     	; 0x5e <main+0x8>

00000070 <ADC_PRESCALER_SET>:
		|| defined(__AVR_ATmega8__)\
		|| defined(__AVR_ATmega48__) || defined(__AVR_ATmega48A__) || defined(__AVR_ATmega48P__) || defined(__AVR_ATmega48PA__) || defined(__AVR_ATmega48PB__)\
		|| defined(__AVR_ATmega88__) || defined(__AVR_ATmega88A__) || defined(__AVR_ATmega88P__) || defined(__AVR_ATmega88PA__) || defined(__AVR_ATmega88PB__)\
		|| defined(__AVR_ATmega168__) || defined(__AVR_ATmega168P__) || defined(__AVR_ATmega168A__) || defined(__AVR_ATmega168PA__) || defined(__AVR_ATmega168PB__)\
		|| defined(__AVR_ATmega328__) || defined(__AVR_ATmega328P__)
			ADCSRA &= (~(1<<ADPS2)) & (~(1<<ADPS1)) & (~(1<<ADPS0)) ; // clear ADPS2:ADPS0 for initialization
  70:	ea e7       	ldi	r30, 0x7A	; 122
  72:	f0 e0       	ldi	r31, 0x00	; 0
  74:	90 81       	ld	r25, Z
  76:	98 7f       	andi	r25, 0xF8	; 248
  78:	90 83       	st	Z, r25
	
		switch(prescaler)
  7a:	80 31       	cpi	r24, 0x10	; 16
  7c:	09 f1       	breq	.+66     	; 0xc0 <ADC_PRESCALER_SET+0x50>
  7e:	38 f4       	brcc	.+14     	; 0x8e <ADC_PRESCALER_SET+0x1e>
  80:	84 30       	cpi	r24, 0x04	; 4
  82:	91 f0       	breq	.+36     	; 0xa8 <ADC_PRESCALER_SET+0x38>
  84:	88 30       	cpi	r24, 0x08	; 8
  86:	b1 f0       	breq	.+44     	; 0xb4 <ADC_PRESCALER_SET+0x44>
  88:	82 30       	cpi	r24, 0x02	; 2
  8a:	91 f5       	brne	.+100    	; 0xf0 <ADC_PRESCALER_SET+0x80>
  8c:	07 c0       	rjmp	.+14     	; 0x9c <ADC_PRESCALER_SET+0x2c>
  8e:	80 34       	cpi	r24, 0x40	; 64
  90:	19 f1       	breq	.+70     	; 0xd8 <ADC_PRESCALER_SET+0x68>
  92:	80 38       	cpi	r24, 0x80	; 128
  94:	39 f1       	breq	.+78     	; 0xe4 <ADC_PRESCALER_SET+0x74>
  96:	80 32       	cpi	r24, 0x20	; 32
  98:	59 f5       	brne	.+86     	; 0xf0 <ADC_PRESCALER_SET+0x80>
  9a:	18 c0       	rjmp	.+48     	; 0xcc <ADC_PRESCALER_SET+0x5c>
		{
			case 2:ADCSRA |= (1<<ADPS0);//-----------------------------------  0 0 1
  9c:	ea e7       	ldi	r30, 0x7A	; 122
  9e:	f0 e0       	ldi	r31, 0x00	; 0
  a0:	80 81       	ld	r24, Z
  a2:	81 60       	ori	r24, 0x01	; 1
  a4:	80 83       	st	Z, r24
			break;
  a6:	08 95       	ret
			case 4:ADCSRA |= (1<<ADPS1);//-----------------------------------  0 1 0
  a8:	ea e7       	ldi	r30, 0x7A	; 122
  aa:	f0 e0       	ldi	r31, 0x00	; 0
  ac:	80 81       	ld	r24, Z
  ae:	82 60       	ori	r24, 0x02	; 2
  b0:	80 83       	st	Z, r24
			break;
  b2:	08 95       	ret
			case 8:ADCSRA |= (1<<ADPS1) | (1<<ADPS0);//----------------------  0 1 1
  b4:	ea e7       	ldi	r30, 0x7A	; 122
  b6:	f0 e0       	ldi	r31, 0x00	; 0
  b8:	80 81       	ld	r24, Z
  ba:	83 60       	ori	r24, 0x03	; 3
  bc:	80 83       	st	Z, r24
			break;
  be:	08 95       	ret
			case 16:ADCSRA |= (1<<ADPS2);//----------------------------------  1 0 0
  c0:	ea e7       	ldi	r30, 0x7A	; 122
  c2:	f0 e0       	ldi	r31, 0x00	; 0
  c4:	80 81       	ld	r24, Z
  c6:	84 60       	ori	r24, 0x04	; 4
  c8:	80 83       	st	Z, r24
			break;
  ca:	08 95       	ret
			case 32:ADCSRA |= (1<<ADPS2) | (1<<ADPS0);//---------------------  1 0 1
  cc:	ea e7       	ldi	r30, 0x7A	; 122
  ce:	f0 e0       	ldi	r31, 0x00	; 0
  d0:	80 81       	ld	r24, Z
  d2:	85 60       	ori	r24, 0x05	; 5
  d4:	80 83       	st	Z, r24
			break;
  d6:	08 95       	ret
			case 64:ADCSRA |= (1<<ADPS2) | (1<<ADPS1);//---------------------  1 1 0
  d8:	ea e7       	ldi	r30, 0x7A	; 122
  da:	f0 e0       	ldi	r31, 0x00	; 0
  dc:	80 81       	ld	r24, Z
  de:	86 60       	ori	r24, 0x06	; 6
  e0:	80 83       	st	Z, r24
			break;
  e2:	08 95       	ret
			case 128:ADCSRA |= (1<<ADPS2) | (1<<ADPS1) | (1<<ADPS0);//-------  1 1 1
  e4:	ea e7       	ldi	r30, 0x7A	; 122
  e6:	f0 e0       	ldi	r31, 0x00	; 0
  e8:	80 81       	ld	r24, Z
  ea:	87 60       	ori	r24, 0x07	; 7
  ec:	80 83       	st	Z, r24
			break;
  ee:	08 95       	ret
			default:ADCSRA &= (~(1<<ADPS2)) & (~(1<<ADPS1)) & (~(1<<ADPS0));// 0 0 0
  f0:	ea e7       	ldi	r30, 0x7A	; 122
  f2:	f0 e0       	ldi	r31, 0x00	; 0
  f4:	80 81       	ld	r24, Z
  f6:	88 7f       	andi	r24, 0xF8	; 248
  f8:	80 83       	st	Z, r24
  fa:	08 95       	ret

000000fc <ADC_voltage_Reference>:
		|| defined(__AVR_ATmega8__)\
		|| defined(__AVR_ATmega48__) || defined(__AVR_ATmega48A__) || defined(__AVR_ATmega48P__) || defined(__AVR_ATmega48PA__) || defined(__AVR_ATmega48PB__)\
		|| defined(__AVR_ATmega88__) || defined(__AVR_ATmega88A__) || defined(__AVR_ATmega88P__) || defined(__AVR_ATmega88PA__) || defined(__AVR_ATmega88PB__)\
		|| defined(__AVR_ATmega168__) || defined(__AVR_ATmega168P__) || defined(__AVR_ATmega168A__) || defined(__AVR_ATmega168PA__) || defined(__AVR_ATmega168PB__)\
		||defined(__AVR_ATmega328__) || defined(__AVR_ATmega328P__)
		ADMUX &= (~(1<<REFS0)) & (~(1<<REFS1)); // clear REFS1:REFS0 for initialization
  fc:	ec e7       	ldi	r30, 0x7C	; 124
  fe:	f0 e0       	ldi	r31, 0x00	; 0
 100:	90 81       	ld	r25, Z
 102:	9f 73       	andi	r25, 0x3F	; 63
 104:	90 83       	st	Z, r25
		ADMUX |= (1<<REFS0); // Default AVCC has been set
 106:	90 81       	ld	r25, Z
 108:	90 64       	ori	r25, 0x40	; 64
 10a:	90 83       	st	Z, r25
	
		if(Reference_Voltage==AREF){ADMUX &= (~(1<<REFS0)) & (~(1<<REFS1));}
 10c:	81 11       	cpse	r24, r1
 10e:	04 c0       	rjmp	.+8      	; 0x118 <ADC_voltage_Reference+0x1c>
 110:	80 81       	ld	r24, Z
 112:	8f 73       	andi	r24, 0x3F	; 63
 114:	80 83       	st	Z, r24
 116:	08 95       	ret
		else if (Reference_Voltage==AVCC){ADMUX |= (1<<REFS0);}
 118:	81 30       	cpi	r24, 0x01	; 1
 11a:	31 f4       	brne	.+12     	; 0x128 <ADC_voltage_Reference+0x2c>
 11c:	ec e7       	ldi	r30, 0x7C	; 124
 11e:	f0 e0       	ldi	r31, 0x00	; 0
 120:	80 81       	ld	r24, Z
 122:	80 64       	ori	r24, 0x40	; 64
 124:	80 83       	st	Z, r24
 126:	08 95       	ret
		else if (Reference_Voltage==INTERNAL){ADMUX |= (1<<REFS1) | (1<<REFS0);}
 128:	83 30       	cpi	r24, 0x03	; 3
 12a:	31 f4       	brne	.+12     	; 0x138 <ADC_voltage_Reference+0x3c>
 12c:	ec e7       	ldi	r30, 0x7C	; 124
 12e:	f0 e0       	ldi	r31, 0x00	; 0
 130:	80 81       	ld	r24, Z
 132:	80 6c       	ori	r24, 0xC0	; 192
 134:	80 83       	st	Z, r24
 136:	08 95       	ret
		else{ADMUX |= (1<<REFS0);}
 138:	ec e7       	ldi	r30, 0x7C	; 124
 13a:	f0 e0       	ldi	r31, 0x00	; 0
 13c:	80 81       	ld	r24, Z
 13e:	80 64       	ori	r24, 0x40	; 64
 140:	80 83       	st	Z, r24
 142:	08 95       	ret

00000144 <ADC_INIT>:
//	------------possible parameter---------
//	prescaler = 2,4,8,16,32,64,128
//  Voltage_Reference = AREF,AVCC,INTERNAL

void ADC_INIT(uint8_t prescaler, uint8_t Voltage_Reference)
{
 144:	cf 93       	push	r28
 146:	c6 2f       	mov	r28, r22
		|| defined(__AVR_ATmega48__) || defined(__AVR_ATmega48A__) || defined(__AVR_ATmega48P__) || defined(__AVR_ATmega48PA__) || defined(__AVR_ATmega48PB__)\
		|| defined(__AVR_ATmega88__) || defined(__AVR_ATmega88A__) || defined(__AVR_ATmega88P__) || defined(__AVR_ATmega88PA__) || defined(__AVR_ATmega88PB__)\
		|| defined(__AVR_ATmega168__) || defined(__AVR_ATmega168P__) || defined(__AVR_ATmega168A__) || defined(__AVR_ATmega168PA__) || defined(__AVR_ATmega168PB__)\
		|| defined(__AVR_ATmega328__) || defined(__AVR_ATmega328P__)
	
		ADCSRA |= (1<<ADEN); // ADC Enable
 148:	ea e7       	ldi	r30, 0x7A	; 122
 14a:	f0 e0       	ldi	r31, 0x00	; 0
 14c:	90 81       	ld	r25, Z
 14e:	90 68       	ori	r25, 0x80	; 128
 150:	90 83       	st	Z, r25
		ADC_PRESCALER_SET(prescaler); // set sampling frequency by prescaler bit
 152:	8e df       	rcall	.-228    	; 0x70 <ADC_PRESCALER_SET>
		ADC_voltage_Reference(Voltage_Reference); //set voltage reference //by default AVCC has been selected
 154:	8c 2f       	mov	r24, r28
 156:	d2 df       	rcall	.-92     	; 0xfc <ADC_voltage_Reference>
		ADMUX &= ~(1<<ADLAR); //left adjust off // Though by default left adjust off // this line use for more convenient for future developer
 158:	ec e7       	ldi	r30, 0x7C	; 124
 15a:	f0 e0       	ldi	r31, 0x00	; 0
 15c:	80 81       	ld	r24, Z
 15e:	8f 7d       	andi	r24, 0xDF	; 223
 160:	80 83       	st	Z, r24
	#endif
}
 162:	cf 91       	pop	r28
 164:	08 95       	ret

00000166 <ADC_READ>:
	#elif defined(__AVR_ATmega8__)\
		|| defined(__AVR_ATmega48__) || defined(__AVR_ATmega48A__) || defined(__AVR_ATmega48P__) || defined(__AVR_ATmega48PA__) || defined(__AVR_ATmega48PB__)\
		|| defined(__AVR_ATmega88__) || defined(__AVR_ATmega88A__) || defined(__AVR_ATmega88P__) || defined(__AVR_ATmega88PA__) || defined(__AVR_ATmega88PB__)\
		|| defined(__AVR_ATmega168__) || defined(__AVR_ATmega168P__) || defined(__AVR_ATmega168A__) || defined(__AVR_ATmega168PA__) || defined(__AVR_ATmega168PB__)\
		||defined(__AVR_ATmega328__) || defined(__AVR_ATmega328P__)
		ADMUX &=  (~(1<<MUX3)) & (~(1<<MUX2)) & (~(1<<MUX1)) & (~(1<<MUX0)); // set channel ADC0 default
 166:	ec e7       	ldi	r30, 0x7C	; 124
 168:	f0 e0       	ldi	r31, 0x00	; 0
 16a:	90 81       	ld	r25, Z
 16c:	90 7f       	andi	r25, 0xF0	; 240
 16e:	90 83       	st	Z, r25
	
		switch(channel)
 170:	90 e0       	ldi	r25, 0x00	; 0
 172:	88 30       	cpi	r24, 0x08	; 8
 174:	91 05       	cpc	r25, r1
 176:	a0 f5       	brcc	.+104    	; 0x1e0 <ADC_READ+0x7a>
 178:	fc 01       	movw	r30, r24
 17a:	e6 5e       	subi	r30, 0xE6	; 230
 17c:	ff 4f       	sbci	r31, 0xFF	; 255
 17e:	09 94       	ijmp
		{
			case 0:ADMUX &=  (~(1<<MUX3)) & (~(1<<MUX2)) & (~(1<<MUX1)) & (~(1<<MUX0)); //---------- 0 0 0 0 0
 180:	ec e7       	ldi	r30, 0x7C	; 124
 182:	f0 e0       	ldi	r31, 0x00	; 0
 184:	80 81       	ld	r24, Z
 186:	80 7f       	andi	r24, 0xF0	; 240
 188:	80 83       	st	Z, r24
			break;
 18a:	2f c0       	rjmp	.+94     	; 0x1ea <ADC_READ+0x84>
			case 1:ADMUX |= (1<<MUX0);//-------------------------------------------------------------------------- 0 0 0 0 1
 18c:	ec e7       	ldi	r30, 0x7C	; 124
 18e:	f0 e0       	ldi	r31, 0x00	; 0
 190:	80 81       	ld	r24, Z
 192:	81 60       	ori	r24, 0x01	; 1
 194:	80 83       	st	Z, r24
			break;
 196:	29 c0       	rjmp	.+82     	; 0x1ea <ADC_READ+0x84>
			case 2:ADMUX |= (1<<MUX1);//-------------------------------------------------------------------------- 0 0 0 1 0
 198:	ec e7       	ldi	r30, 0x7C	; 124
 19a:	f0 e0       	ldi	r31, 0x00	; 0
 19c:	80 81       	ld	r24, Z
 19e:	82 60       	ori	r24, 0x02	; 2
 1a0:	80 83       	st	Z, r24
			break;
 1a2:	23 c0       	rjmp	.+70     	; 0x1ea <ADC_READ+0x84>
			case 3:ADMUX |= (1<<MUX1) | (1<<MUX0);//-------------------------------------------------------------- 0 0 0 1 1
 1a4:	ec e7       	ldi	r30, 0x7C	; 124
 1a6:	f0 e0       	ldi	r31, 0x00	; 0
 1a8:	80 81       	ld	r24, Z
 1aa:	83 60       	ori	r24, 0x03	; 3
 1ac:	80 83       	st	Z, r24
			break;
 1ae:	1d c0       	rjmp	.+58     	; 0x1ea <ADC_READ+0x84>
			case 4:ADMUX |= (1<<MUX2);//-------------------------------------------------------------------------- 0 0 1 0 0
 1b0:	ec e7       	ldi	r30, 0x7C	; 124
 1b2:	f0 e0       	ldi	r31, 0x00	; 0
 1b4:	80 81       	ld	r24, Z
 1b6:	84 60       	ori	r24, 0x04	; 4
 1b8:	80 83       	st	Z, r24
			break;
 1ba:	17 c0       	rjmp	.+46     	; 0x1ea <ADC_READ+0x84>
			case 5:ADMUX |= (1<<MUX2) | (1<<MUX0);//-------------------------------------------------------------- 0 0 1 0 1
 1bc:	ec e7       	ldi	r30, 0x7C	; 124
 1be:	f0 e0       	ldi	r31, 0x00	; 0
 1c0:	80 81       	ld	r24, Z
 1c2:	85 60       	ori	r24, 0x05	; 5
 1c4:	80 83       	st	Z, r24
			break;
 1c6:	11 c0       	rjmp	.+34     	; 0x1ea <ADC_READ+0x84>
			case 6:ADMUX |= (1<<MUX2) | (1<<MUX1);//-------------------------------------------------------------- 0 0 1 1 0
 1c8:	ec e7       	ldi	r30, 0x7C	; 124
 1ca:	f0 e0       	ldi	r31, 0x00	; 0
 1cc:	80 81       	ld	r24, Z
 1ce:	86 60       	ori	r24, 0x06	; 6
 1d0:	80 83       	st	Z, r24
			break;
 1d2:	0b c0       	rjmp	.+22     	; 0x1ea <ADC_READ+0x84>
			case 7:ADMUX |= (1<<MUX2) | (1<<MUX1) | (1<<MUX0);//-------------------------------------------------- 0 0 1 1 1
 1d4:	ec e7       	ldi	r30, 0x7C	; 124
 1d6:	f0 e0       	ldi	r31, 0x00	; 0
 1d8:	80 81       	ld	r24, Z
 1da:	87 60       	ori	r24, 0x07	; 7
 1dc:	80 83       	st	Z, r24
			break;
 1de:	05 c0       	rjmp	.+10     	; 0x1ea <ADC_READ+0x84>
			default:ADMUX &= (~(1<<MUX3)) & (~(1<<MUX2)) & (~(1<<MUX1)) & (~(1<<MUX0)); // set channel ADC0 default
 1e0:	ec e7       	ldi	r30, 0x7C	; 124
 1e2:	f0 e0       	ldi	r31, 0x00	; 0
 1e4:	80 81       	ld	r24, Z
 1e6:	80 7f       	andi	r24, 0xF0	; 240
 1e8:	80 83       	st	Z, r24
		}
		ADCSRA |=(1<<ADSC); // ADC conversion start
 1ea:	ea e7       	ldi	r30, 0x7A	; 122
 1ec:	f0 e0       	ldi	r31, 0x00	; 0
 1ee:	80 81       	ld	r24, Z
 1f0:	80 64       	ori	r24, 0x40	; 64
 1f2:	80 83       	st	Z, r24
	
		while((ADCSRA & (1<<ADIF)) == 0){}; // wait for end conversion ( after conversion ADIF bit will be set automatically )
 1f4:	80 81       	ld	r24, Z
 1f6:	84 ff       	sbrs	r24, 4
 1f8:	fd cf       	rjmp	.-6      	; 0x1f4 <ADC_READ+0x8e>
		//uint8_t high,low;
		//high=ADCH;
		//low=ADCL;
		return ADCW;// when conversion finished all data will be stored in ADCW
 1fa:	80 91 78 00 	lds	r24, 0x0078
 1fe:	90 91 79 00 	lds	r25, 0x0079
	
	
	#else
		#error "No processor type defined!"
	#endif
}
 202:	08 95       	ret

00000204 <_exit>:
 204:	f8 94       	cli

00000206 <__stop_program>:
 206:	ff cf       	rjmp	.-2      	; 0x206 <__stop_program>
